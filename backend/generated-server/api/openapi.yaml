openapi: 3.1.0
info:
  description: API for the Kotobalize technical interview preparation app.
  title: Kotobalize API
  version: 1.0.0
servers:
- description: Development server
  url: http://localhost:8080/api/v1
security:
- bearerAuth: []
paths:
  /auth/signup:
    post:
      operationId: signupUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          description: User registered successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: User with this email already exists
      summary: Sign up a new user
      tags:
      - Auth
  /auth/login:
    post:
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          description: User logged in successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
      summary: Authenticate user and get a token
      tags:
      - Auth
  /auth/me:
    get:
      operationId: getCurrentUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Current user information
        "401":
          $ref: '#/components/responses/Unauthorized'
      security:
      - bearerAuth: []
      summary: Get current authenticated user's information
      tags:
      - Auth
  /users/me/avatar:
    delete:
      operationId: deleteUserAvatar
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Avatar deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
      security:
      - bearerAuth: []
      summary: Delete user's avatar
      tags:
      - Users
    put:
      operationId: updateUserAvatar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAvatarRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Avatar URL updated successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
      security:
      - bearerAuth: []
      summary: Update user's avatar URL
      tags:
      - Users
  /users/me/avatar/upload-url:
    post:
      operationId: getAvatarUploadURL
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvatarUploadRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvatarUploadResponse'
          description: Presigned URL generated successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
      security:
      - bearerAuth: []
      summary: Get a presigned URL for avatar upload
      tags:
      - Users
  /themes:
    get:
      operationId: listThemes
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Theme'
                type: array
          description: A list of themes
        "401":
          $ref: '#/components/responses/Unauthorized'
      security:
      - bearerAuth: []
      summary: Get a list of all available themes
      tags:
      - Themes
    post:
      operationId: createTheme
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewThemeRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theme'
          description: Theme created successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
      security:
      - bearerAuth: []
      summary: Create a new theme
      tags:
      - Themes
  /themes/{themeId}:
    delete:
      operationId: deleteTheme
      parameters:
      - explode: false
        in: path
        name: themeId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "204":
          description: Theme deleted successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      security:
      - bearerAuth: []
      summary: Delete a theme
      tags:
      - Themes
    get:
      operationId: getThemeById
      parameters:
      - explode: false
        in: path
        name: themeId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theme'
          description: Theme details
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      security:
      - bearerAuth: []
      summary: Get details of a specific theme by ID
      tags:
      - Themes
    put:
      operationId: updateTheme
      parameters:
      - explode: false
        in: path
        name: themeId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateThemeRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theme'
          description: Theme updated successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      security:
      - bearerAuth: []
      summary: Update an existing theme
      tags:
      - Themes
  /themes/{themeId}/favorite:
    delete:
      operationId: unfavoriteTheme
      parameters:
      - explode: false
        in: path
        name: themeId
        required: true
        schema:
          format: int66
          type: integer
        style: simple
      responses:
        "204":
          description: Theme unfavorited successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
      security:
      - bearerAuth: []
      summary: Unfavorite a theme
      tags:
      - Themes
    post:
      operationId: favoriteTheme
      parameters:
      - explode: false
        in: path
        name: themeId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "204":
          description: Theme favorited successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
      security:
      - bearerAuth: []
      summary: Favorite a theme
      tags:
      - Themes
  /writings:
    get:
      operationId: listUserWritings
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Writing'
                type: array
          description: A list of user's writings
        "401":
          $ref: '#/components/responses/Unauthorized'
      security:
      - bearerAuth: []
      summary: Get a list of all writings for the authenticated user
      tags:
      - Writings
    post:
      operationId: createWriting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewWritingRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Writing'
          description: Writing record created successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Theme not found
      security:
      - bearerAuth: []
      summary: Create a new writing record and trigger AI review
      tags:
      - Writings
  /writings/{writingId}:
    get:
      operationId: getWritingById
      parameters:
      - explode: false
        in: path
        name: writingId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Writing'
          description: Writing record details
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Forbidden - User does not own this writing
        "404":
          $ref: '#/components/responses/NotFound'
      security:
      - bearerAuth: []
      summary: Get details of a specific writing record by ID
      tags:
      - Writings
  /review:
    post:
      operationId: reviewWriting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewReviewRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Writing'
          description: AI review completed successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Forbidden - User does not own this writing
        "404":
          $ref: '#/components/responses/NotFound'
      security:
      - bearerAuth: []
      summary: Trigger AI review for a writing
      tags:
      - Writings
components:
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
      description: Bad Request - Invalid input
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
      description: Unauthorized - Authentication required or invalid credentials
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
      description: Not Found - Resource not found
    Conflict:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
      description: Conflict - The request could not be completed due to a conflict
        with the current state of the resource.
  schemas:
    User:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        avatarUrl: avatarUrl
        id: 0
        email: email
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: int64
          readOnly: true
          type: integer
        email:
          format: email
          readOnly: true
          type: string
        avatarUrl:
          description: URL of the user's avatar image.
          type: string
          nullable: true
        createdAt:
          format: date-time
          readOnly: true
          type: string
        updatedAt:
          format: date-time
          readOnly: true
          type: string
      required:
      - createdAt
      - email
      - id
      - updatedAt
    Theme:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        timeLimitInSeconds: 6
        creatorId: 1
        description: description
        isFavorited: true
        id: 0
        title: title
        category: category
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: int64
          readOnly: true
          type: integer
        title:
          type: string
        description:
          type: string
        category:
          type: string
        timeLimitInSeconds:
          format: int32
          type: integer
        createdAt:
          format: date-time
          readOnly: true
          type: string
        updatedAt:
          format: date-time
          readOnly: true
          type: string
        creatorId:
          description: ID of the user who created the theme. Null for official themes.
          format: int64
          readOnly: true
          type: integer
          nullable: true
        isFavorited:
          description: Indicates if the current user has favorited this theme.
          readOnly: true
          type: boolean
      required:
      - category
      - createdAt
      - description
      - id
      - timeLimitInSeconds
      - title
      - updatedAt
    Writing:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        aiScore: 5
        durationSeconds: 5
        aiFeedback: aiFeedback
        themeId: 1
        id: 0
        userId: 6
        content: content
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: int64
          readOnly: true
          type: integer
        userId:
          format: int64
          readOnly: true
          type: integer
        themeId:
          format: int64
          type: integer
        content:
          type: string
        durationSeconds:
          format: int32
          type: integer
        aiScore:
          description: The total score from 0 to 100.
          format: int32
          type: integer
          nullable: true
        aiFeedback:
          description: Detailed feedback from AI based on 5 viewpoints. This will
            be stored as a JSON string.
          type: string
          nullable: true
        createdAt:
          format: date-time
          readOnly: true
          type: string
        updatedAt:
          format: date-time
          readOnly: true
          type: string
      required:
      - content
      - createdAt
      - durationSeconds
      - id
      - themeId
      - updatedAt
      - userId
    NewWritingRequest:
      example:
        durationSeconds: 6
        themeId: 0
        content: content
      properties:
        themeId:
          format: int64
          type: integer
        content:
          type: string
        durationSeconds:
          format: int32
          type: integer
      required:
      - content
      - durationSeconds
      - themeId
    NewThemeRequest:
      example:
        timeLimitInSeconds: 0
        description: description
        title: title
        category: category
      properties:
        title:
          type: string
        description:
          type: string
        category:
          type: string
        timeLimitInSeconds:
          format: int32
          type: integer
      required:
      - category
      - description
      - timeLimitInSeconds
      - title
    UpdateThemeRequest:
      example:
        timeLimitInSeconds: 0
        description: description
        title: title
        category: category
      properties:
        title:
          type: string
        description:
          type: string
        category:
          type: string
        timeLimitInSeconds:
          format: int32
          type: integer
    NewReviewRequest:
      example:
        writingId: 0
      properties:
        writingId:
          format: int64
          type: integer
      required:
      - writingId
    RegisterRequest:
      example:
        password: password
        email: email
      properties:
        email:
          format: email
          type: string
        password:
          format: password
          type: string
      required:
      - email
      - password
    LoginRequest:
      example:
        password: password
        email: email
      properties:
        email:
          format: email
          type: string
        password:
          format: password
          type: string
      required:
      - email
      - password
    UpdateAvatarRequest:
      example:
        avatarUrl: https://openapi-generator.tech
      properties:
        avatarUrl:
          format: uri
          type: string
      required:
      - avatarUrl
    AvatarUploadRequest:
      example:
        fileName: fileName
        fileType: fileType
      properties:
        fileName:
          type: string
        fileType:
          type: string
      required:
      - fileName
      - fileType
    AvatarUploadResponse:
      example:
        uploadUrl: uploadUrl
        key: key
      properties:
        uploadUrl:
          type: string
        key:
          type: string
      required:
      - key
      - uploadUrl
    AuthResponse:
      example:
        user:
          createdAt: 2000-01-23T04:56:07.000+00:00
          avatarUrl: avatarUrl
          id: 0
          email: email
          updatedAt: 2000-01-23T04:56:07.000+00:00
        token: token
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
      required:
      - token
      - user
    ApiError:
      example:
        code: code
        message: message
      properties:
        code:
          type: string
        message:
          type: string
      required:
      - code
      - message
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
