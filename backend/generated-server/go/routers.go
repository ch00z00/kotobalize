/*
 * Kotobalize API
 *
 * API for the Kotobalize technical interview preparation app.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name		string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method		string
	// Pattern is the pattern of the URI.
	Pattern	 	string
	// HandlerFunc is the handler function of this route.
	HandlerFunc	gin.HandlerFunc
}

// NewRouter returns a new router.
func NewRouter(handleFunctions ApiHandleFunctions) *gin.Engine {
	return NewRouterWithGinEngine(gin.Default(), handleFunctions)
}

// NewRouter add routes to existing gin engine.
func NewRouterWithGinEngine(router *gin.Engine, handleFunctions ApiHandleFunctions) *gin.Engine {
	for _, route := range getRoutes(handleFunctions) {
		if route.HandlerFunc == nil {
			route.HandlerFunc = DefaultHandleFunc
		}
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Default handler for not yet implemented routes
func DefaultHandleFunc(c *gin.Context) {
	c.String(http.StatusNotImplemented, "501 not implemented")
}

type ApiHandleFunctions struct {

	// Routes for the AuthAPI part of the API
	AuthAPI AuthAPI
	// Routes for the ThemesAPI part of the API
	ThemesAPI ThemesAPI
	// Routes for the UsersAPI part of the API
	UsersAPI UsersAPI
	// Routes for the WritingsAPI part of the API
	WritingsAPI WritingsAPI
}

func getRoutes(handleFunctions ApiHandleFunctions) []Route {
	return []Route{ 
		{
			"GetCurrentUser",
			http.MethodGet,
			"/api/v1/auth/me",
			handleFunctions.AuthAPI.GetCurrentUser,
		},
		{
			"LoginUser",
			http.MethodPost,
			"/api/v1/auth/login",
			handleFunctions.AuthAPI.LoginUser,
		},
		{
			"SignupUser",
			http.MethodPost,
			"/api/v1/auth/signup",
			handleFunctions.AuthAPI.SignupUser,
		},
		{
			"CreateTheme",
			http.MethodPost,
			"/api/v1/themes",
			handleFunctions.ThemesAPI.CreateTheme,
		},
		{
			"DeleteTheme",
			http.MethodDelete,
			"/api/v1/themes/:themeId",
			handleFunctions.ThemesAPI.DeleteTheme,
		},
		{
			"FavoriteTheme",
			http.MethodPost,
			"/api/v1/themes/:themeId/favorite",
			handleFunctions.ThemesAPI.FavoriteTheme,
		},
		{
			"GetThemeById",
			http.MethodGet,
			"/api/v1/themes/:themeId",
			handleFunctions.ThemesAPI.GetThemeById,
		},
		{
			"ListThemes",
			http.MethodGet,
			"/api/v1/themes",
			handleFunctions.ThemesAPI.ListThemes,
		},
		{
			"UnfavoriteTheme",
			http.MethodDelete,
			"/api/v1/themes/:themeId/favorite",
			handleFunctions.ThemesAPI.UnfavoriteTheme,
		},
		{
			"UpdateTheme",
			http.MethodPut,
			"/api/v1/themes/:themeId",
			handleFunctions.ThemesAPI.UpdateTheme,
		},
		{
			"DeleteUserAvatar",
			http.MethodDelete,
			"/api/v1/users/me/avatar",
			handleFunctions.UsersAPI.DeleteUserAvatar,
		},
		{
			"GetAvatarUploadURL",
			http.MethodPost,
			"/api/v1/users/me/avatar/upload-url",
			handleFunctions.UsersAPI.GetAvatarUploadURL,
		},
		{
			"UpdateUserAvatar",
			http.MethodPut,
			"/api/v1/users/me/avatar",
			handleFunctions.UsersAPI.UpdateUserAvatar,
		},
		{
			"UpdateUserPassword",
			http.MethodPut,
			"/api/v1/users/me/password",
			handleFunctions.UsersAPI.UpdateUserPassword,
		},
		{
			"UpdateUserProfile",
			http.MethodPut,
			"/api/v1/users/me",
			handleFunctions.UsersAPI.UpdateUserProfile,
		},
		{
			"CreateWriting",
			http.MethodPost,
			"/api/v1/writings",
			handleFunctions.WritingsAPI.CreateWriting,
		},
		{
			"GetWritingById",
			http.MethodGet,
			"/api/v1/writings/:writingId",
			handleFunctions.WritingsAPI.GetWritingById,
		},
		{
			"ListUserWritings",
			http.MethodGet,
			"/api/v1/writings",
			handleFunctions.WritingsAPI.ListUserWritings,
		},
		{
			"ReviewWriting",
			http.MethodPost,
			"/api/v1/review",
			handleFunctions.WritingsAPI.ReviewWriting,
		},
	}
}
