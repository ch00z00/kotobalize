openapi: 3.1.0
info:
 title: Kotobalize API
 description: API for the Kotobalize technical interview preparation app.
 version: 1.0.0
servers:
 - url: http://localhost:8080/api/v1
   description: Development server

security:
 - bearerAuth: []

paths:
 /auth/signup:
  post:
   summary: Sign up a new user
   operationId: signupUser
   tags:
    - Auth
   requestBody:
    required: true
    content:
     application/json:
      schema:
       $ref: "#/components/schemas/RegisterRequest"
   responses:
    "201":
     description: User registered successfully
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/AuthResponse"
    "400":
     $ref: "#/components/responses/BadRequest"
    "409":
     description: User with this email already exists
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/ApiError"

 /auth/login:
  post:
   summary: Authenticate user and get a token
   operationId: loginUser
   tags:
    - Auth
   requestBody:
    required: true
    content:
     application/json:
      schema:
       $ref: "#/components/schemas/LoginRequest"
   responses:
    "200":
     description: User logged in successfully
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/AuthResponse"
    "400":
     $ref: "#/components/responses/BadRequest"
    "401":
     $ref: "#/components/responses/Unauthorized"

 /auth/me:
  get:
   summary: Get current authenticated user's information
   operationId: getCurrentUser
   tags:
    - Auth
   security:
    - bearerAuth: []
   responses:
    "200":
     description: Current user information
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/User"
    "401":
     $ref: "#/components/responses/Unauthorized"

 /themes:
  get:
   summary: Get a list of all available themes
   operationId: listThemes
   tags:
    - Themes
   security:
    - bearerAuth: []
   responses:
    "200":
     description: A list of themes
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: "#/components/schemas/Theme"
    "401":
     $ref: "#/components/responses/Unauthorized"

  post:
   summary: Create a new theme
   operationId: createTheme
   tags:
    - Themes
   security:
    - bearerAuth: []
   requestBody:
    required: true
    content:
     application/json:
      schema:
       $ref: "#/components/schemas/NewThemeRequest"
   responses:
    "201":
     description: Theme created successfully
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/Theme"
    "400":
     $ref: "#/components/responses/BadRequest"
    "401":
     $ref: "#/components/responses/Unauthorized"

 /themes/{themeId}:
  get:
   summary: Get details of a specific theme by ID
   operationId: getThemeById
   tags:
    - Themes
   security:
    - bearerAuth: []
   parameters:
    - name: themeId
      in: path
      required: true
      schema:
       type: integer
       format: int64
   responses:
    "200":
     description: Theme details
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/Theme"
    "401":
     $ref: "#/components/responses/Unauthorized"
    "404":
     $ref: "#/components/responses/NotFound"

 /writings:
  get:
   summary: Get a list of all writings for the authenticated user
   operationId: listUserWritings
   tags:
    - Writings
   security:
    - bearerAuth: []
   responses:
    "200":
     description: A list of user's writings
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: "#/components/schemas/Writing"
    "401":
     $ref: "#/components/responses/Unauthorized"
  post:
   summary: Create a new writing record and trigger AI review
   operationId: createWriting
   tags:
    - Writings
   security:
    - bearerAuth: []
   requestBody:
    required: true
    content:
     application/json:
      schema:
       $ref: "#/components/schemas/NewWritingRequest"
   responses:
    "201":
     description: Writing record created successfully
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/Writing"
    "400":
     $ref: "#/components/responses/BadRequest"
    "401":
     $ref: "#/components/responses/Unauthorized"
    "404":
     description: Theme not found
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/ApiError"

 /writings/{writingId}:
  get:
   summary: Get details of a specific writing record by ID
   operationId: getWritingById
   tags:
    - Writings
   security:
    - bearerAuth: []
   parameters:
    - name: writingId
      in: path
      required: true
      schema:
       type: integer
       format: int64
   responses:
    "200":
     description: Writing record details
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/Writing"
    "401":
     $ref: "#/components/responses/Unauthorized"
    "403":
     description: Forbidden - User does not own this writing
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/ApiError"
    "404":
     $ref: "#/components/responses/NotFound"

 /review:
  post:
   summary: Trigger AI review for a writing
   operationId: reviewWriting
   tags:
    - Writings
   security:
    - bearerAuth: []
   requestBody:
    required: true
    content:
     application/json:
      schema:
       $ref: "#/components/schemas/NewReviewRequest"
   responses:
    "200":
     description: AI review completed successfully
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/Writing"
    "400":
     $ref: "#/components/responses/BadRequest"
    "401":
     $ref: "#/components/responses/Unauthorized"
    "403":
     description: Forbidden - User does not own this writing
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/ApiError"
    "404":
     $ref: "#/components/responses/NotFound"

components:
 securitySchemes:
  bearerAuth:
   type: http
   scheme: bearer
   bearerFormat: JWT

 schemas:
  User:
   type: object
   properties:
    id:
     type: integer
     format: int64
     readOnly: true
    email:
     type: string
     format: email
     readOnly: true
    avatarUrl:
     type: string
     nullable: true
     description: URL of the user's avatar image.
    createdAt:
     type: string
     format: date-time
     readOnly: true
    updatedAt:
     type: string
     format: date-time
     readOnly: true
   required:
    - id
    - email
    - createdAt
    - updatedAt

  Theme:
   type: object
   properties:
    id:
     type: integer
     format: int64
     readOnly: true
    title:
     type: string
    description:
     type: string
    category:
     type: string
    createdAt:
     type: string
     format: date-time
     readOnly: true
    updatedAt:
     type: string
     format: date-time
     readOnly: true
   required:
    - id
    - title
    - description
    - category
    - createdAt
    - updatedAt

  Writing:
   type: object
   properties:
    id:
     type: integer
     format: int64
     readOnly: true
    userId:
     type: integer
     format: int64
     readOnly: true
    themeId:
     type: integer
     format: int64
    content:
     type: string
    durationSeconds:
     type: integer
     format: int32
    aiScore:
     type: integer
     format: int32
     nullable: true # AIレビューがまだの場合
    aiFeedbackOverall:
     type: string
     nullable: true
    aiFeedbackClarity:
     type: string
     nullable: true
    aiFeedbackAccuracy:
     type: string
     nullable: true
    aiFeedbackCompleteness:
     type: string
     nullable: true
    aiFeedbackStructure:
     type: string
     nullable: true
    aiFeedbackConciseness:
     type: string
     nullable: true
    createdAt:
     type: string
     format: date-time
     readOnly: true
    updatedAt:
     type: string
     format: date-time
     readOnly: true
   required:
    - id
    - userId
    - themeId
    - content
    - durationSeconds
    - createdAt
    - updatedAt

  NewWritingRequest:
   type: object
   properties:
    themeId:
     type: integer
     format: int64
    content:
     type: string
    durationSeconds:
     type: integer
     format: int32
   required:
    - themeId
    - content
    - durationSeconds

  NewThemeRequest:
   type: object
   properties:
    title:
     type: string
    description:
     type: string
    category:
     type: string
   required:
    - title
    - description
    - category

  NewReviewRequest:
   type: object
   properties:
    writingId:
     type: integer
     format: int64
   required:
    - writingId

  RegisterRequest:
   type: object
   properties:
    email:
     type: string
     format: email
    password:
     type: string
     format: password
   required:
    - email
    - password

  LoginRequest:
   type: object
   properties:
    email:
     type: string
     format: email
    password:
     type: string
     format: password
   required:
    - email
    - password

  AuthResponse:
   type: object
   properties:
    token:
     type: string
    user:
     $ref: "#/components/schemas/User"
   required:
    - token
    - user

  ApiError:
   type: object
   properties:
    code:
     type: string
    message:
     type: string
   required:
    - code
    - message

 responses:
  BadRequest:
   description: Bad Request - Invalid input
   content:
    application/json:
     schema:
      $ref: "#/components/schemas/ApiError"
  Unauthorized:
   description: Unauthorized - Authentication required or invalid credentials
   content:
    application/json:
     schema:
      $ref: "#/components/schemas/ApiError"
  NotFound:
   description: Not Found - Resource not found
   content:
    application/json:
     schema:
      $ref: "#/components/schemas/ApiError"
