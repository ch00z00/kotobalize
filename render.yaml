# Render Blueprint: https://render.com/docs/blueprint-spec

services:
 # 1. フロントエンド (Next.js)
 # Next.jsのSSR（サーバーサイドレンダリング）などの機能を活かすため、Webサービスとしてデプロイします。
 - type: web
   name: kotobalize-frontend
   runtime: node
   plan: free
   rootDir: frontend
   buildCommand: npm install && npm run build
   startCommand: npm start
   envVars:
    - key: NODE_ENV
      value: production
    - key: NEXT_PUBLIC_API_URL # バックエンドサービスの公開URLを直接指定します。
      # fromServiceの'url'はビルド時には利用できないためです。
      value: https://kotobalize-backend.onrender.com

 # 2. バックエンド (Go)
 # CIでビルドしたDockerイメージをデプロイします。
 - type: web
   name: kotobalize-backend
   runtime: docker
   plan: free
   rootDir: backend
   dockerfilePath: ./Dockerfile
   healthCheckPath: /health
   envVars:
    - key: DATABASE_URL
      # MySQLデータベースの内部接続用URLを自動で環境変数に設定します。
      fromService:
       type: pserv
       name: kotobalize-db # 下で定義するDBサービス名と一致させる
       property: connectionString
    - key: GIN_MODE # GoのフレームワークがGinの場合の例
      value: release
    # --- シークレット情報 ---
    # JWT_SECRETのような秘密情報は、Renderのダッシュボードで設定します。
    # 'sync: false' を指定すると、このyamlファイルでダッシュボードの値を上書きしなくなります。
    - key: JWT_SECRET
      sync: false

 # 3. データベース (MySQL)
 # 外部から直接アクセスできないプライベートサービスとしてデプロイします。
 - type: pserv
   name: kotobalize-db
   runtime: image
   plan: free
   autoDeploy: false
   disk:
    name: mysql
    mountPath: /var/lib/mysql
    sizeGB: 10
   envVars:
    - fromGroup: mysql

envVarGroups:
 - name: mysql
   envVars:
    - key: DB_USER
      value: kotobalize_user
    - key: DB_PASSWORD
      generateValue: true
    - key: DB_HOST
      value: db
    - key: DB_PORT
      value: 3306
    - key: DB_NAME
      value: kotobalize_db
